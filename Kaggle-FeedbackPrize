import numpy as np
import os

from datetime import datetime

import matplotlib.pyplot as plt
import matplotlib
font = {'weight' : 'normal',
        'size'   : 22}
matplotlib.rc('font', **font)


loadPartialTrainingData = 0
prjPath = os.getcwd()


def main():    
    
    train_x = loadData("train")
    test_x = loadData("test")
    
    return
    

def loadData(folderName):
    # https://www.geeksforgeeks.org/how-to-read-multiple-text-files-from-folder-in-python/
    
    traindata = []
    
    path = prjPath + "\\" + folderName
    print("Loading data from: " + str(path))
    os.chdir(path)
    def read_text_file(file_path):
        with open(file_path, 'r') as f:
            traindata.append(f.read())
    
    d = 0
    # iterate through all file
    for file in os.listdir():
        # Check whether file is in text format or not
        if file.endswith(".txt"):
            file_path = f"{path}\\{file}"
      
            # call read text file function
            read_text_file(file_path)
            d = d + 1
        if (d >= loadPartialTrainingData and loadPartialTrainingData > 0):
            break
    
    return traindata
    
    
    
    # # train = np.loadtxt("mnist_small_train_justindexes.csv", delimiter=",", dtype=np.float64)
    # print("Loading data 2/3")
    # val = np.loadtxt("mnist_small_val.csv", delimiter=",", dtype=np.float64)
    # # val = np.loadtxt("mnist_small_val_tworow.csv", delimiter=",", dtype=np.float64)
    # print("Loading data 3/3")
    # test = np.loadtxt("mnist_small_test.csv", delimiter=",", dtype=np.float64)
    # # test = np.loadtxt("mnist_small_test_tworow.csv", delimiter=",", dtype=np.float64)
    
    # # Normalize Our Data
    # if normalize:
    #     X_train = train[:,:-1]/256-0.5
    #     X_val = val[:,:-1]/256-0.5
    #     X_test = test/256-0.5
    # else:
    #     X_train = train[:,:-1]
    #     X_val = val[:,:-1]
    #     X_test = test
    
    # Y_train = train[:,-1].astype(np.int)[:,np.newaxis]
    # Y_val = val[:,-1].astype(np.int)[:,np.newaxis]
    
    # print("Loaded train: " + str(X_train.shape))
    # print("Loaded val: " + str(X_val.shape))
    # print("Loaded test: "+ str(X_test.shape)) 
    
    # return X_train, Y_train, X_val, Y_val, X_tes

if __name__=="__main__":
  main()
